generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String    @db.Text
  image       String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  price          Float
  quantity       Int
  description    String          @db.Text
  image          String?
  category_id    Int
  brand_id       Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  category       Category        @relation(fields: [category_id], references: [id])
  order_products OrderProducts[]
  Brands         Brands?         @relation(fields: [brand_id], references: [id])
}

model Brands {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Orders {
  id                  Int                @id @default(autoincrement())
  order_nr            String             @unique @default(cuid())
  date                DateTime           @default(now())
  payment_type        String
  item_total          Float
  order_total         Float
  order_tax           Float
  order_discount      Float?
  order_discount_type OrderDiscountType?
  order_products      OrderProducts[]
  refunds             Refunds[]
}

model OrderProducts {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  qty        Int
  product    Product?  @relation(fields: [product_id], references: [id])
  order      Orders?   @relation(fields: [order_id], references: [id])
  Refunds    Refunds[]
}

model RefundTypes {
  id      Int       @id @default(autoincrement())
  type    String
  refunds Refunds[]
}

model Refunds {
  id               Int           @id @default(autoincrement())
  refund_request   DateTime      @default(now())
  ammount_refunded Float
  refund_type      Int
  order_id         Int
  order_product_id Int
  order            Orders        @relation(fields: [order_id], references: [id])
  order_products   OrderProducts @relation(fields: [order_product_id], references: [id])
  refund_type_id   RefundTypes   @relation(fields: [refund_type], references: [id])

}

model Customers {
  id             Int         @id @default(autoincrement())
  name           String
  surname        String
  email          String?
  birthday       DateTime
  loyalty_number String      @unique
  loyalty_credit Float
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  CreditLog      CreditLog[]
}

model CreditLog {
  id          Int           @id @default(autoincrement())
  customer_id Int?
  Customer    Customers?    @relation(fields: [customer_id], references: [id])
  createdAt   DateTime      @default(now())
  type        CreditLogType @default(ADD)
}

model Giftcard {
  id    Int @id @default(autoincrement())
  value Int
}

enum CreditLogType {
  ADD
  SUBTRACT
}

enum OrderDiscountType {
  MANUAL
  CREDIT
}

model Users {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
}
